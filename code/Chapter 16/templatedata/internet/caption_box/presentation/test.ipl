#!C:\PROGRA~1\INTERW~1\TeamSite/iw-perl/bin/iwperl -w
#------------------------------------------------------------------------------ 
#------------------------------------------------------------------------------
#
# Copyright 1999-2006 Interwoven Inc.
# All rights reserved.
#
#                                                             
#   This is the code created by <iw_xml> tags during template compilation.
#   It has been packaged up into this stand-alone script as a debugging aid
#   (via the '-ocode' compilation flag). 
#                                                             
#   To produce the output that would have normally been generated by
#   iwpt_compile.ipl (when not in '-ocode' mode),  execute this program.
#
#   To run this program under a grapical debugger, replace the  -w
#   switch at the top of this file with   -d:ptkdb
#        
#------------------------------------------------------------------------------
use utf8;
package TeamSite::PT::_iw_xml_generated_0;
use TeamSite::PT::iw_xml qw(:iwpt);

iw_parser_init();  

  

#------------------------------------------------------------------------------ 
#------------------------------------------------------------------------------

               

# <iw_pt>
        {
            # Fetching template args from command line
            my %iw_arg=();
            {   
                my $argcount = 0;
                %iw_arg  =   
                    map 
                    { 
                        my @lst=(); 
                        if ($_ =~ /^([^\=\s]+?)\s*\=(.+)/)  
                        {
                            @lst = ($1, $2);
                            $argcount+=2;
                        }
                        elsif ( !($argcount%2)  &&  ($_ =~ /^([^\=\s]*?)\=?$/))
                        {
                            @lst = ($1); 
                            $argcount++;
                        }
                        elsif ( ($argcount %2)  &&  ($_ =~ /^\s*\=\s*$/) )
                        {
                           @lst = ();
                        }
                        else
                        {
                            @lst = ($_);
                            $argcount++;
                        }
                        @lst;
                    } TeamSite::PT::iw_xml::get_flag_param($iw_parser, 
                                                           '-iw_pt-arg');
            }
            if (!defined $iw_parser->{'iw_xml'}{'data'}{'iw_pt'}{'dcr'})
            {
                $iw_parser->{'iw_xml'}{'data'}{'iw_pt'}{'dcr'} = [];
            }


           TeamSite::PTparser::add_pt_to_manifest($iw_parser,
                                                  $iw_parser->{pt},
                                                  $iw_parser->{pkg_suffix},
                                                  \%iw_arg,
                                                 );


            #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



# XML element  0
$_iw_tmp_=<<'EOS_50811767578125';


EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_perl>
        
  my $preview = 0;
  my $ofile = iwpt_get_ofile_name();
  if ($ofile =~ /zz_/) { $preview=1;  }

        # </iw_perl>

    
# XML element  0
$_iw_tmp_=<<'EOS_50811767578125';
   


EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  ($preview eq "1") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  17
$_iw_tmp_=<<'EOS_50811767578125';

<style>
.preview {
	background: #E6E9F0;
	border-right:1px solid #ccc;
	border-left:1px solid #ccc;
	font:normal 11px arial;
	color:#666;
	margin: 0;
	padding:4px;
	width: 170px;
        text-align:right;

}
h4 {
	background: #96A5C6;
	border:1px solid #ccc;
	color: #fff;
	font:bold 13px arial;
	margin: 0;
	padding:4px;
	width: 165px;
	text-align:center;
}
.text_form_field {

	color: #666;
	font: normal 11px arial;
	margin:2px 0 2px 0;
	padding:0;
        width:90px;
        height:18px;

}

</style>
<div id='contentContainer'>
<div class="preview"><!-- ******* 3.SIDEBAR SECTION  - RIGHT ********************************************************* -->
  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # </iw_if>
        }  # end of iw_if scope

# XML element  0
$_iw_tmp_=<<'EOS_50811767578125';



  <h4>
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($iw_parser->{'iw_xml'}{'data'}{'iw_pt'}{'dcr'}[0][3]{'caption_box'}[0][3]{'header'}[0][3]{'text'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  0
$_iw_tmp_=<<'EOS_50811767578125';
&nbsp;
  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  (${[iwpt_var_value(scalar($iw_parser->{'iw_xml'}{'data'}{'iw_pt'}{'dcr'}[0][3]{'caption_box'}[0][3]{'header'}[0][3]{'icon'}[0][3]{'CDATA'}[0][4]))]}[0] ne "") ? 1 : 0;
        
        # </iw_if>
        }  # end of iw_if scope

# XML element  0
$_iw_tmp_=<<'EOS_50811767578125';

  </h4>

  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                # <iw_iterate>
                if(1)
                {   my $iw_iteration=-1;    # iteration count
                                   # optional loop label
                    foreach my $body ( ( @{ local $^W=0; 
          # filtered list of all children            
          [  grep { ref($_) eq "TeamSite::DCRnode"  &&  (($_->[0] ne CDATA) || ($_->[4]) ne '')
                  }  @{ $iw_parser->{'iw_xml'}{'data'}{'iw_pt'}{'dcr'}[0][3]{'caption_box'}[0][3]{'body'} }  
          ]}
 )  )
                    {
                        $iw_iteration++; 
                        

# XML element  112
$_iw_tmp_=<<'EOS_50811767578125';

    
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                # <iw_iterate>
                if(1)
                {   my $iw_iteration=-1;    # iteration count
                                   # optional loop label
                    foreach my $body_element ( ( @{ local $^W=0; 
          # filtered list of all children            
          [  grep { ref($_) eq "TeamSite::DCRnode"  &&  (($_->[0] ne CDATA) || ($_->[4]) ne '')
                  }  sort { $a->[1] <=> $b->[1] }  map {@$_} values %{$body->[3]}  
          ]}
 )  )
                    {
                        $iw_iteration++; 
                        

# XML element  115
$_iw_tmp_=<<'EOS_50811767578125';

    
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_ifcase>
        if (1)                              # just a scope, not a 1-time loop!
        {
            my ($iw_ifcase_value, 
                 $iw_ifcase_type, 
                 %iw_ifcase_attrib
               ) = iwpt_var_stat( scalar( $body_element ) );
    
        # <iw_case>
        if ( $iw_ifcase_type eq 'select_form' )
        {

    
# XML element  121
$_iw_tmp_=<<'EOS_50811767578125';

        <div class="links"  style="text-align:left">
          
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{'description'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  121
$_iw_tmp_=<<'EOS_50811767578125';

          
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  (${[iwpt_var_value(scalar($body_element->[3]{'text_align'}[0][3]{'CDATA'}[0][4]))]}[0] eq "top") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  131
$_iw_tmp_=<<'EOS_50811767578125';
<br/>
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # </iw_if>
        }  # end of iw_if scope

# XML element  121
$_iw_tmp_=<<'EOS_50811767578125';

          <select name="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{'name'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  121
$_iw_tmp_=<<'EOS_50811767578125';
">
            
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                # <iw_iterate>
                if(1)
                {   my $iw_iteration=-1;    # iteration count
                                   # optional loop label
                    foreach my $options ( ( @{ local $^W=0; 
          # filtered list of all children            
          [  grep { ref($_) eq "TeamSite::DCRnode"  &&  (($_->[0] ne CDATA) || ($_->[4]) ne '')
                  }  @{ $body_element->[3]{'options'} }  
          ]}
 )  )
                    {
                        $iw_iteration++; 
                        

# XML element  138
$_iw_tmp_=<<'EOS_50811767578125';

              <option value="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{'value'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  138
$_iw_tmp_=<<'EOS_50811767578125';
">
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{'label'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  138
$_iw_tmp_=<<'EOS_50811767578125';
</option>
            
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                    }
                } # </iw_iterate>

# XML element  121
$_iw_tmp_=<<'EOS_50811767578125';
          
          </select>&nbsp;<img src="/images/button/goSmall.gif" width="23" height="16" />
        </div>
      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # </iw_case>

        }  # end of iw_case scope

        # <iw_case>
        elsif ( $iw_ifcase_type eq 'text_form' )
        {

    
# XML element  157
$_iw_tmp_=<<'EOS_50811767578125';

      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_perl>
        
        my $text_style="text_form_field";
        my $test = iwpt_get_dcr_value('body_element.text_align');
        
        #if ($test eq "top") {
        #  $text_style="";
        #}
      
        # </iw_perl>

    
# XML element  157
$_iw_tmp_=<<'EOS_50811767578125';

      <iw value="$test"/>Test<br>
        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  (${[iwpt_var_value(scalar($body_element->[3]{'text_align'}[0][3]{'CDATA'}[0][4]))]}[0] eq "top") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  182
$_iw_tmp_=<<'EOS_50811767578125';
<div style="text-align:left">
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # <iw_else>
        if (! $iw_if ) {

        
# XML element  184
$_iw_tmp_=<<'EOS_50811767578125';
<div style="text-align:right">
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_else>

        # </iw_if>
        }  # end of iw_if scope

# XML element  157
$_iw_tmp_=<<'EOS_50811767578125';

        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{'description'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  157
$_iw_tmp_=<<'EOS_50811767578125';

        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  (${[iwpt_var_value(scalar($body_element->[3]{'text_align'}[0][3]{'CDATA'}[0][4]))]}[0] eq "top") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  192
$_iw_tmp_=<<'EOS_50811767578125';
<br/>
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # </iw_if>
        }  # end of iw_if scope

# XML element  157
$_iw_tmp_=<<'EOS_50811767578125';

	<input name="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{'name'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  157
$_iw_tmp_=<<'EOS_50811767578125';
" id="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body->[3]{'name'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  157
$_iw_tmp_=<<'EOS_50811767578125';
" class="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($text_style))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  157
$_iw_tmp_=<<'EOS_50811767578125';
" type="text" size="14" />
        </div>
      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # </iw_case>

        }  # end of iw_case scope

        # <iw_case>
        elsif ( $iw_ifcase_type eq 'radio_form' )
        {

    
# XML element  204
$_iw_tmp_=<<'EOS_50811767578125';

        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                # <iw_iterate>
                if(1)
                {   my $iw_iteration=-1;    # iteration count
                                   # optional loop label
                    foreach my $options ( ( @{ local $^W=0; 
          # filtered list of all children            
          [  grep { ref($_) eq "TeamSite::DCRnode"  &&  (($_->[0] ne CDATA) || ($_->[4]) ne '')
                  }  @{ $body_element->[3]{'options'} }  
          ]}
 )  )
                    {
                        $iw_iteration++; 
                        

# XML element  207
$_iw_tmp_=<<'EOS_50811767578125';

          <input value="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{'value'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<'EOS_50811767578125';
" name="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{'name'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<'EOS_50811767578125';
" id="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{'value'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<'EOS_50811767578125';
" type="radio" 
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{'checked'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<'EOS_50811767578125';
> 
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{'label'}[0][3]{'CDATA'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<'EOS_50811767578125';

        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                    }
                } # </iw_iterate>

# XML element  204
$_iw_tmp_=<<'EOS_50811767578125';

        <br/>
      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # </iw_case>

        }  # end of iw_case scope

        # <iw_case>
        elsif ( $iw_ifcase_type eq 'button_form' )
        {

    
# XML element  221
$_iw_tmp_=<<'EOS_50811767578125';

        <div style="margin-top:2px;text-align:right"><img src="/images/button/got.gif"/></div>
      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # </iw_case>

        }  # end of iw_case scope

        # </iw_ifcase>

        }  # end of iw_ifcase scope

# XML element  115
$_iw_tmp_=<<'EOS_50811767578125';

    
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                    }
                } # </iw_iterate>

# XML element  112
$_iw_tmp_=<<'EOS_50811767578125';

  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                    }
                } # </iw_iterate>

# XML element  0
$_iw_tmp_=<<'EOS_50811767578125';




EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  ($preview eq "1") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  239
$_iw_tmp_=<<'EOS_50811767578125';

    </div>
  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # </iw_if>
        }  # end of iw_if scope

# XML element  0
$_iw_tmp_=<<'EOS_50811767578125';


EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;



                TeamSite::PTparser::write_string_to_file(
                      $iw_parser                        ,
                      '>'                                ,
                      iwpt_get_ofile_name()              ,
                      TeamSite::DCRparser::utf8_to_other_encoding(
                               'UTF-8',
                               iwpt_get_ostream_data('default'))
                );

            
            TeamSite::PTparser::add_tag_to_manifest($iw_parser,"status","OK");
         
       #----------------------------------------------------------------------
       #
       #                           API functions
       #
       #----------------------------------------------------------------------
       # force the API to defined within the desired package
       package TeamSite::PT::_iw_xml_generated_0;

       # output data
       sub iwpt_output 
       { 
         TeamSite::PTparser::iwpt_output($iw_parser,@_); 
       }
       sub iwpt_get_default_oenc
       {
           my $iw_xml = TeamSite::PT::iw_xml->new($iw_parser);
           return TeamSite::PT::iw_xml::get_default_oenc($iw_xml,@_);
       }
       sub iwpt_get_ostream_name
       {
         return TeamSite::PTparser::get_ostream_name($iw_parser,@_);
       }
       sub iwpt_set_ostream_name
       {
         return TeamSite::PTparser::set_ostream_name($iw_parser,@_);
       }
       sub iwpt_get_ostream_data
       {
         return TeamSite::PTparser::get_ostream_data($iw_parser,@_);
       }
       sub iwpt_set_ostream_data
       {
         return TeamSite::PTparser::set_ostream_data($iw_parser,@_);
       }
 
       # get output file name (or undef)
       sub iwpt_get_ofile_name
       {
         return TeamSite::PT::iw_xml::get_ofile_name($iw_parser,@_);
       }
       
       # get dcr file name(s) (or undef)
       sub iwpt_get_dcr_name
       {
         return TeamSite::PT::iw_xml::get_dcr_name($iw_parser,@_);
       }
 
       # get presentation template file name
       sub iwpt_get_pt_name
       {
         return TeamSite::PT::iw_xml::get_pt_name($iw_parser,@_);
       }

       # returns command line arg(s) filtered by flag parameter
       sub iwpt_get_flag_param
       {
         return TeamSite::PT::iw_xml::get_flag_param($iw_parser,@_);
       }

       # load a DCR from a file (option: make it global: dcr[4].x.y)
       sub iwpt_load_dcr
       {
         return TeamSite::PT::iw_xml::load_dcr($iw_parser,@_);
       }

       # open a file using the I18N encoding employed by the OS
       sub iwpt_open_osenc
       {
         return TeamSite::PTparser::open_osenc($iw_parser,@_);
       }

       #----------------------------------------------------------------------

    
           }  # </iw_pt>































#-----------------------------------------------------------------------
#
#   iw_parser_init()  this function is part of the packaging needed to 
#                     run the code generated by the <iw_xml> tags as a 
#                     stand-alone script  (it initializes $iw_parser).     
#
#-----------------------------------------------------------------------
 
sub iw_parser_init
{
    $iw_parser = bless( {
                      'pt' => 'caption_box.tpl',
                      'parser' => bless( {
                                           'Non_Expat_Options' => {
                                                                    'NoLWP' => 1,
                                                                    'Non_Expat_Options' => 1,
                                                                    '_HNDL_TYPES' => 1,
                                                                    'Handlers' => 1,
                                                                    'Style' => 1
                                                                  },
                                           'Pkg' => 'TeamSite::PTparser',
                                           '_HNDL_TYPES' => {
                                                              'CdataEnd' => sub { "DUMMY" },
                                                              'Start' => sub { "DUMMY" },
                                                              'Entity' => sub { "DUMMY" },
                                                              'ExternEntFin' => sub { "DUMMY" },
                                                              'End' => sub { "DUMMY" },
                                                              'Final' => 1,
                                                              'Doctype' => sub { "DUMMY" },
                                                              'Char' => sub { "DUMMY" },
                                                              'Init' => 1,
                                                              'XMLDecl' => sub { "DUMMY" },
                                                              'Default' => sub { "DUMMY" },
                                                              'CdataStart' => sub { "DUMMY" },
                                                              'Comment' => sub { "DUMMY" },
                                                              'Unparsed' => sub { "DUMMY" },
                                                              'ExternEnt' => sub { "DUMMY" },
                                                              'Element' => sub { "DUMMY" },
                                                              'Attlist' => sub { "DUMMY" },
                                                              'DoctypeFin' => sub { "DUMMY" },
                                                              'Notation' => sub { "DUMMY" },
                                                              'Proc' => sub { "DUMMY" }
                                                            },
                                           'Handlers' => {
                                                           'End' => sub { "DUMMY" },
                                                           'Final' => sub { "DUMMY" },
                                                           'Char' => sub { "DUMMY" },
                                                           'ExternEnt' => sub { "DUMMY" },
                                                           'Comment' => sub { "DUMMY" },
                                                           'Start' => sub { "DUMMY" },
                                                           'Init' => sub { "DUMMY" }
                                                         },
                                           'iw' => {}
                                         }, 'XML::Parser' ),
                      'eid' => 0,
                      'ostream' => {
                                     'default' => ''
                                   },
                      'pkg_suffix_child' => '0',
                      'ancestor' => [],
                      'pkg_suffix' => '0',
                      'charbuf' => undef,
                      'ostream_name' => 'default',
                      'debug' => 0,
                      'argv' => [
                                  '-pt',
                                  'caption_box.tpl',
                                  '-ocode',
                                  'test',
                                  '-ofile',
                                  'test_zz',
                                  '-oprefix'
                                ],
                      'manifest_fh' => undef,
                      'eval_error' => undef,
                      'iw_comment' => 0,
                      'iw_xml' => {
                                    'init_state' => {
                                                      'iw_sql_iterate' => -1,
                                                      'iw_load_dcr' => -1,
                                                      'iw_perl' => 2,
                                                      'iw_repeat' => -1,
                                                      'iw_system' => -1,
                                                      'iw_cscript' => -1,
                                                      'iw_sql_query' => -1,
                                                      'iw_ostream' => -1,
                                                      'iw_next' => -1,
                                                      'iwov_emailmap' => -1,
                                                      'iwov_xslt' => -1,
                                                      'iw_comment' => -1,
                                                      'iw_else' => 184,
                                                      'iw_url_escape' => -1,
                                                      'iw_ifcase' => 118,
                                                      'iw_xml' => -1,
                                                      'iw_pt' => 0,
                                                      'iwov_webdesk_url' => -1,
                                                      'iw_then' => 17,
                                                      'iw_last' => -1,
                                                      'iw_value' => 96,
                                                      'iw_if' => 14,
                                                      'iw_include' => -1,
                                                      'iw_sql_open' => -1,
                                                      'iw_iterate' => 112,
                                                      'iw_case' => 121
                                                    }
                                  },
                      'eid_' => 246,
                      'eval_init' => '',
                      'eval_string' => '
# <iw_pt>
        {
            # Fetching template args from command line
            my %iw_arg=();
            {   
                my $argcount = 0;
                %iw_arg  =   
                    map 
                    { 
                        my @lst=(); 
                        if ($_ =~ /^([^\\=\\s]+?)\\s*\\=(.+)/)  
                        {
                            @lst = ($1, $2);
                            $argcount+=2;
                        }
                        elsif ( !($argcount%2)  &&  ($_ =~ /^([^\\=\\s]*?)\\=?$/))
                        {
                            @lst = ($1); 
                            $argcount++;
                        }
                        elsif ( ($argcount %2)  &&  ($_ =~ /^\\s*\\=\\s*$/) )
                        {
                           @lst = ();
                        }
                        else
                        {
                            @lst = ($_);
                            $argcount++;
                        }
                        @lst;
                    } TeamSite::PT::iw_xml::get_flag_param($iw_parser, 
                                                           \'-iw_pt-arg\');
            }
            if (!defined $iw_parser->{\'iw_xml\'}{\'data\'}{\'iw_pt\'}{\'dcr\'})
            {
                $iw_parser->{\'iw_xml\'}{\'data\'}{\'iw_pt\'}{\'dcr\'} = [];
            }


           TeamSite::PTparser::add_pt_to_manifest($iw_parser,
                                                  $iw_parser->{pt},
                                                  $iw_parser->{pkg_suffix},
                                                  \\%iw_arg,
                                                 );


            #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



# XML element  0
$_iw_tmp_=<<\'EOS_50811767578125\';


EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_perl>
        
  my $preview = 0;
  my $ofile = iwpt_get_ofile_name();
  if ($ofile =~ /zz_/) { $preview=1;  }

        # </iw_perl>

    
# XML element  0
$_iw_tmp_=<<\'EOS_50811767578125\';
   


EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  ($preview eq "1") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  17
$_iw_tmp_=<<\'EOS_50811767578125\';

<style>
.preview {
	background: #E6E9F0;
	border-right:1px solid #ccc;
	border-left:1px solid #ccc;
	font:normal 11px arial;
	color:#666;
	margin: 0;
	padding:4px;
	width: 170px;
        text-align:right;

}
h4 {
	background: #96A5C6;
	border:1px solid #ccc;
	color: #fff;
	font:bold 13px arial;
	margin: 0;
	padding:4px;
	width: 165px;
	text-align:center;
}
.text_form_field {

	color: #666;
	font: normal 11px arial;
	margin:2px 0 2px 0;
	padding:0;
        width:90px;
        height:18px;

}

</style>
<div id=\'contentContainer\'>
<div class="preview"><!-- ******* 3.SIDEBAR SECTION  - RIGHT ********************************************************* -->
  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # </iw_if>
        }  # end of iw_if scope

# XML element  0
$_iw_tmp_=<<\'EOS_50811767578125\';



  <h4>
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($iw_parser->{\'iw_xml\'}{\'data\'}{\'iw_pt\'}{\'dcr\'}[0][3]{\'caption_box\'}[0][3]{\'header\'}[0][3]{\'text\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  0
$_iw_tmp_=<<\'EOS_50811767578125\';
&nbsp;
  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  (${[iwpt_var_value(scalar($iw_parser->{\'iw_xml\'}{\'data\'}{\'iw_pt\'}{\'dcr\'}[0][3]{\'caption_box\'}[0][3]{\'header\'}[0][3]{\'icon\'}[0][3]{\'CDATA\'}[0][4]))]}[0] ne "") ? 1 : 0;
        
        # </iw_if>
        }  # end of iw_if scope

# XML element  0
$_iw_tmp_=<<\'EOS_50811767578125\';

  </h4>

  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                # <iw_iterate>
                if(1)
                {   my $iw_iteration=-1;    # iteration count
                                   # optional loop label
                    foreach my $body ( ( @{ local $^W=0; 
          # filtered list of all children            
          [  grep { ref($_) eq "TeamSite::DCRnode"  &&  (($_->[0] ne CDATA) || ($_->[4]) ne \'\')
                  }  @{ $iw_parser->{\'iw_xml\'}{\'data\'}{\'iw_pt\'}{\'dcr\'}[0][3]{\'caption_box\'}[0][3]{\'body\'} }  
          ]}
 )  )
                    {
                        $iw_iteration++; 
                        

# XML element  112
$_iw_tmp_=<<\'EOS_50811767578125\';

    
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                # <iw_iterate>
                if(1)
                {   my $iw_iteration=-1;    # iteration count
                                   # optional loop label
                    foreach my $body_element ( ( @{ local $^W=0; 
          # filtered list of all children            
          [  grep { ref($_) eq "TeamSite::DCRnode"  &&  (($_->[0] ne CDATA) || ($_->[4]) ne \'\')
                  }  sort { $a->[1] <=> $b->[1] }  map {@$_} values %{$body->[3]}  
          ]}
 )  )
                    {
                        $iw_iteration++; 
                        

# XML element  115
$_iw_tmp_=<<\'EOS_50811767578125\';

    
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_ifcase>
        if (1)                              # just a scope, not a 1-time loop!
        {
            my ($iw_ifcase_value, 
                 $iw_ifcase_type, 
                 %iw_ifcase_attrib
               ) = iwpt_var_stat( scalar( $body_element ) );
    
        # <iw_case>
        if ( $iw_ifcase_type eq \'select_form\' )
        {

    
# XML element  121
$_iw_tmp_=<<\'EOS_50811767578125\';

        <div class="links"  style="text-align:left">
          
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{\'description\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  121
$_iw_tmp_=<<\'EOS_50811767578125\';

          
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  (${[iwpt_var_value(scalar($body_element->[3]{\'text_align\'}[0][3]{\'CDATA\'}[0][4]))]}[0] eq "top") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  131
$_iw_tmp_=<<\'EOS_50811767578125\';
<br/>
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # </iw_if>
        }  # end of iw_if scope

# XML element  121
$_iw_tmp_=<<\'EOS_50811767578125\';

          <select name="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{\'name\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  121
$_iw_tmp_=<<\'EOS_50811767578125\';
">
            
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                # <iw_iterate>
                if(1)
                {   my $iw_iteration=-1;    # iteration count
                                   # optional loop label
                    foreach my $options ( ( @{ local $^W=0; 
          # filtered list of all children            
          [  grep { ref($_) eq "TeamSite::DCRnode"  &&  (($_->[0] ne CDATA) || ($_->[4]) ne \'\')
                  }  @{ $body_element->[3]{\'options\'} }  
          ]}
 )  )
                    {
                        $iw_iteration++; 
                        

# XML element  138
$_iw_tmp_=<<\'EOS_50811767578125\';

              <option value="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{\'value\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  138
$_iw_tmp_=<<\'EOS_50811767578125\';
">
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{\'label\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  138
$_iw_tmp_=<<\'EOS_50811767578125\';
</option>
            
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                    }
                } # </iw_iterate>

# XML element  121
$_iw_tmp_=<<\'EOS_50811767578125\';
          
          </select>&nbsp;<img src="/images/button/goSmall.gif" width="23" height="16" />
        </div>
      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # </iw_case>

        }  # end of iw_case scope

        # <iw_case>
        elsif ( $iw_ifcase_type eq \'text_form\' )
        {

    
# XML element  157
$_iw_tmp_=<<\'EOS_50811767578125\';

      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_perl>
        
        my $text_style="text_form_field";
        my $test = iwpt_get_dcr_value(\'body_element.text_align\');
        
        #if ($test eq "top") {
        #  $text_style="";
        #}
      
        # </iw_perl>

    
# XML element  157
$_iw_tmp_=<<\'EOS_50811767578125\';

      <iw value="$test"/>Test<br>
        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  (${[iwpt_var_value(scalar($body_element->[3]{\'text_align\'}[0][3]{\'CDATA\'}[0][4]))]}[0] eq "top") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  182
$_iw_tmp_=<<\'EOS_50811767578125\';
<div style="text-align:left">
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # <iw_else>
        if (! $iw_if ) {

        
# XML element  184
$_iw_tmp_=<<\'EOS_50811767578125\';
<div style="text-align:right">
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_else>

        # </iw_if>
        }  # end of iw_if scope

# XML element  157
$_iw_tmp_=<<\'EOS_50811767578125\';

        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{\'description\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  157
$_iw_tmp_=<<\'EOS_50811767578125\';

        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  (${[iwpt_var_value(scalar($body_element->[3]{\'text_align\'}[0][3]{\'CDATA\'}[0][4]))]}[0] eq "top") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  192
$_iw_tmp_=<<\'EOS_50811767578125\';
<br/>
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # </iw_if>
        }  # end of iw_if scope

# XML element  157
$_iw_tmp_=<<\'EOS_50811767578125\';

	<input name="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{\'name\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  157
$_iw_tmp_=<<\'EOS_50811767578125\';
" id="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body->[3]{\'name\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  157
$_iw_tmp_=<<\'EOS_50811767578125\';
" class="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($text_style))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  157
$_iw_tmp_=<<\'EOS_50811767578125\';
" type="text" size="14" />
        </div>
      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # </iw_case>

        }  # end of iw_case scope

        # <iw_case>
        elsif ( $iw_ifcase_type eq \'radio_form\' )
        {

    
# XML element  204
$_iw_tmp_=<<\'EOS_50811767578125\';

        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                # <iw_iterate>
                if(1)
                {   my $iw_iteration=-1;    # iteration count
                                   # optional loop label
                    foreach my $options ( ( @{ local $^W=0; 
          # filtered list of all children            
          [  grep { ref($_) eq "TeamSite::DCRnode"  &&  (($_->[0] ne CDATA) || ($_->[4]) ne \'\')
                  }  @{ $body_element->[3]{\'options\'} }  
          ]}
 )  )
                    {
                        $iw_iteration++; 
                        

# XML element  207
$_iw_tmp_=<<\'EOS_50811767578125\';

          <input value="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{\'value\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<\'EOS_50811767578125\';
" name="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($body_element->[3]{\'name\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<\'EOS_50811767578125\';
" id="
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{\'value\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<\'EOS_50811767578125\';
" type="radio" 
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{\'checked\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<\'EOS_50811767578125\';
> 
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


           # <iw_value>
           iwpt_output( ${[iwpt_var_value(scalar($options->[3]{\'label\'}[0][3]{\'CDATA\'}[0][4]))]}[0], "UTF-8" );
           # </iw_value>
    
# XML element  207
$_iw_tmp_=<<\'EOS_50811767578125\';

        
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                    }
                } # </iw_iterate>

# XML element  204
$_iw_tmp_=<<\'EOS_50811767578125\';

        <br/>
      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # </iw_case>

        }  # end of iw_case scope

        # <iw_case>
        elsif ( $iw_ifcase_type eq \'button_form\' )
        {

    
# XML element  221
$_iw_tmp_=<<\'EOS_50811767578125\';

        <div style="margin-top:2px;text-align:right"><img src="/images/button/got.gif"/></div>
      
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # </iw_case>

        }  # end of iw_case scope

        # </iw_ifcase>

        }  # end of iw_ifcase scope

# XML element  115
$_iw_tmp_=<<\'EOS_50811767578125\';

    
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                    }
                } # </iw_iterate>

# XML element  112
$_iw_tmp_=<<\'EOS_50811767578125\';

  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


                    }
                } # </iw_iterate>

# XML element  0
$_iw_tmp_=<<\'EOS_50811767578125\';




EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        # <iw_if>
        if (1) {    # bare "{"  messes up iw_next !
            my $iw_if =  ($preview eq "1") ? 1 : 0;
        
        # <iw_then>
        if ( $iw_if ) {

        
# XML element  239
$_iw_tmp_=<<\'EOS_50811767578125\';

    </div>
  
EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;


        }  # </iw_then>

        # </iw_if>
        }  # end of iw_if scope

# XML element  0
$_iw_tmp_=<<\'EOS_50811767578125\';


EOS_50811767578125
chop $_iw_tmp_; $iw_parser->{ostream}{ $iw_parser->{ostream_name} } .= $_iw_tmp_;



                TeamSite::PTparser::write_string_to_file(
                      $iw_parser                        ,
                      \'>\'                                ,
                      iwpt_get_ofile_name()              ,
                      TeamSite::DCRparser::utf8_to_other_encoding(
                               \'UTF-8\',
                               iwpt_get_ostream_data(\'default\'))
                );

            
            TeamSite::PTparser::add_tag_to_manifest($iw_parser,"status","OK");
         
       #----------------------------------------------------------------------
       #
       #                           API functions
       #
       #----------------------------------------------------------------------
       # force the API to defined within the desired package
       package TeamSite::PT::_iw_xml_generated_0;

       # output data
       sub iwpt_output 
       { 
         TeamSite::PTparser::iwpt_output($iw_parser,@_); 
       }
       sub iwpt_get_default_oenc
       {
           my $iw_xml = TeamSite::PT::iw_xml->new($iw_parser);
           return TeamSite::PT::iw_xml::get_default_oenc($iw_xml,@_);
       }
       sub iwpt_get_ostream_name
       {
         return TeamSite::PTparser::get_ostream_name($iw_parser,@_);
       }
       sub iwpt_set_ostream_name
       {
         return TeamSite::PTparser::set_ostream_name($iw_parser,@_);
       }
       sub iwpt_get_ostream_data
       {
         return TeamSite::PTparser::get_ostream_data($iw_parser,@_);
       }
       sub iwpt_set_ostream_data
       {
         return TeamSite::PTparser::set_ostream_data($iw_parser,@_);
       }
 
       # get output file name (or undef)
       sub iwpt_get_ofile_name
       {
         return TeamSite::PT::iw_xml::get_ofile_name($iw_parser,@_);
       }
       
       # get dcr file name(s) (or undef)
       sub iwpt_get_dcr_name
       {
         return TeamSite::PT::iw_xml::get_dcr_name($iw_parser,@_);
       }
 
       # get presentation template file name
       sub iwpt_get_pt_name
       {
         return TeamSite::PT::iw_xml::get_pt_name($iw_parser,@_);
       }

       # returns command line arg(s) filtered by flag parameter
       sub iwpt_get_flag_param
       {
         return TeamSite::PT::iw_xml::get_flag_param($iw_parser,@_);
       }

       # load a DCR from a file (option: make it global: dcr[4].x.y)
       sub iwpt_load_dcr
       {
         return TeamSite::PT::iw_xml::load_dcr($iw_parser,@_);
       }

       # open a file using the I18N encoding employed by the OS
       sub iwpt_open_osenc
       {
         return TeamSite::PTparser::open_osenc($iw_parser,@_);
       }

       #----------------------------------------------------------------------

    
           }  # </iw_pt>
',
                      'manifest_doctype' => 'tst_manifest'
                    }, 'TeamSite::PTparser' );
$iw_parser->{'parser'}{'iw'} = $iw_parser;

    use TeamSite::DCRparser;
use TeamSite::PTparser;
use TeamSite::Config;
use Data::Dumper;
use XML::Parser;
use TeamSite::PT::iw_pt;
use TeamSite::PT::iw_perl;
use TeamSite::PT::iw_if;
use TeamSite::PT::iw_then;
use TeamSite::PT::iw_value;
use TeamSite::PT::iw_iterate;
use TeamSite::PT::iw_ifcase;
use TeamSite::PT::iw_case;
use TeamSite::PT::iw_else;

    $iw_parser->{manifest_fh} = undef;       # force reopen of manifest

    
    if ($^O ne "MSWin32")
    {
        my $umask = TeamSite::PT::iw_xml::get_flag_param($iw_parser,"-umask");
        if (defined $umask) { umask( oct( $umask ) ); }
    }
    

    return;
}  #end of iw_parser_init()
