#!/opt/teamsite/iw-home/iw-perl/bin/iwperl

################################################################
#  prepare_email.ipl
#
#  Purpose:
#  This script will gather data from the workflow and 
#  prepare the email task for a new email.  We have created
#  this task to enable us to break away from having every other
#  task an email task.
#
#  Author:
#  Brian Hastings 2-17-2006
#
################################################################

use TeamSite::WFworkflow;
use TeamSite::WFtask;

my ($job_id,$task_id) = @ARGV;

# Verify we have a job id
if (!defined $job_id || !defined $task_id) {
  print "Usage: prepare_email.ipl must be called from an " .
        "active workflow task.";
  exit;
}

# Create our current Job instance
my $job  = new TeamSite::WFworkflow($job_id);

# Create our current task instance
my $task = new TeamSite::WFtask($task_id);

# Area vpath
my $area_v_path = $task->GetArea();

# Obtain the Signal for the parent task
my $callback_val = $task->GetVariable("signal");

# Obtain the Passback task names we will use these
# to find the owner of the action tasks so that if
# we call back to this routine we will have users
# to assign to them
my $passback =$task->GetVariable("passback");

# Break apart task names 
my @pass_vars = split(";",$passback);

# obtain parent task id & create task
my $parent_task = $job->GetVariable("parent_task");
$parent_task = new TeamSite::WFtask($parent_task);

# obtain parent job id & create parent job for updates
my $parent_job = $parent_task->GetWorkflowId();
$parent_job = new TeamSite::WFworkflow($parent_job);

# loop through passback tasks and set data in parent task
foreach my $var (@pass_vars) {
  my $input_task = get_task_by_name($job,$var);
  my $data = $input_task->GetOwner();
  $parent_task->SetVariable($var,$data);
}

# add comment stating we have finished the task
$parent_task->SetComment("Finished " . $job->GetName());

# Call back parent task
$parent_task->CallBack($callback_val);

$task->CallBack(0);



################################################################
# Get task by task name returns a task with the name passed
################################################################
sub get_task_by_name ($$) {
  my $local_job = shift;
  my $task_name = shift;
  
  my ($suc,$local_task) = $local_job->GetTaskByName($task_name);
  
  return $local_task;

}